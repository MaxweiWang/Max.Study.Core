#pragma checksum "D:\BMax\Study\Max.Study.Core\Max.Study.Core3.1\Views\Second\Info.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eb3df239d0b5635b31aa87bdd2d7219ebc15c7dc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Second_Info), @"mvc.1.0.view", @"/Views/Second/Info.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\BMax\Study\Max.Study.Core\Max.Study.Core3.1\Views\_ViewImports.cshtml"
using Max.Study.Core3;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\BMax\Study\Max.Study.Core\Max.Study.Core3.1\Views\_ViewImports.cshtml"
using Max.Study.Core3.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"eb3df239d0b5635b31aa87bdd2d7219ebc15c7dc", @"/Views/Second/Info.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c024778d3d41fe50fdd19dc3df529ceb5656d125", @"/Views/_ViewImports.cshtml")]
    public class Views_Second_Info : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\BMax\Study\Max.Study.Core\Max.Study.Core3.1\Views\Second\Info.cshtml"
  
    ViewData["Title"] = "Info";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<h1>Info</h1>\r\n\r\n");
            WriteLiteral(@"
<div class=""row"">
    <div class=""col-md-5"">
        <h2>Test </h2>
        <p>
            <input type=""text"" id=""txtAccount"" name=""账号"" />
            <input type=""text"" id=""txtPassword"" name=""密码"" />
            <input type=""button"" id=""btnLogin"" value=""登陆"" />
        </p>

        <p><input type=""text"" id=""txtId"" name=""id"" /> </p>
        <p>
            <input type=""button"" id=""btnGet1"" value=""Get1"" />
            <input type=""button"" id=""btnGet2"" value=""Get2"" />
            <input type=""button"" id=""btnGet3"" value=""Get3"" />
            <input type=""button"" id=""btnGet4"" value=""Get4"" />
        </p>
        <p>
            <input type=""button"" id=""btnGet5"" value=""Get5"" />
            <input type=""button"" id=""btnGet6"" value=""Get6"" />
            <input type=""button"" id=""btnGet7"" value=""Get7"" />
            <input type=""button"" id=""btnGet8"" value=""Get8"" />
            <input type=""button"" id=""btnGet9"" value=""Get9"" />
        </p>

        <p>
            <input type=""button"" id=""btnP");
            WriteLiteral(@"ost1"" value=""Post1"" />
            <input type=""button"" id=""btnPost2"" value=""Post2"" />
            <input type=""button"" id=""btnPost3"" value=""Post3"" />
            <input type=""button"" id=""btnPost4"" value=""Post4"" />
        </p>
        <p>
            <input type=""button"" id=""btnPost5"" value=""Post5"" />
            <input type=""button"" id=""btnPost6"" value=""Post6"" />
        </p>
");
            WriteLiteral(@"        <p>
            <input type=""button"" id=""btnPut1"" value=""Put1"" />
            <input type=""button"" id=""btnPut2"" value=""Put2"" />
            <input type=""button"" id=""btnPut3"" value=""Put3"" />
            <input type=""button"" id=""btnPut4"" value=""Put4"" />
            <input type=""button"" id=""btnPut5"" value=""Put5"" />
            <input type=""button"" id=""btnPut6"" value=""Put6"" />
        </p>
        <p>
            <input type=""button"" id=""btnGetCors1"" value=""跨域Get1"" />
        </p>
    </div>

</div>

");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        $(function () {
            var user = { UserID: ""11"", UserName: ""Eleven"", UserEmail: ""57265177@qq.com"" };
            var info = ""this is muti model"";

            $(""#btnGet1"").on(""click"", function () {
                //$.ajax({ url: ""/api/users"", type: ""get"", data: { ""userName"": ""Superman"" }, success: function (data) { alert(data); }, datatype: ""json"" });//指向接口，参数匹配的，大小写不区分
                $.ajax({
                    //url: ""/api/users/GetUserByName?ticket="" + ticket
                    url: ""/api/users/GetUserByName"", type: ""get"", data: { ""username"": ""Superman"" },
                    beforeSend: function (XHR) {
                        //发送ajax请求之前向http的head里面加入验证信息
                        XHR.setRequestHeader('Authorization', 'BasicAuth ' + ticket);
                    },
                    success: function (data) {
                        alert(data);
                    }, datatype: ""json""
                });
            });
            $(""#btnGet2"").on(""cl");
                WriteLiteral(@"ick"", function () {//单个参数
                $.ajax({ url: ""/api/users/GetUserByID"", type: ""get"", data: { ""id"": $(""#txtId"").val() }, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnGet3"").on(""click"", function () {//两个参数
                $.ajax({ url: ""/api/users/GetUserByNameId"", type: ""get"", data: { ""userName"": ""Superman"", ""id"": $(""#txtId"").val() }, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnGet4"").on(""click"", function () {//无参数
                $.ajax({ url: ""/api/users/Get"", type: ""get"", data: """", success: function (data) { alert(data); }, datatype: ""json"" });
            });

            $(""#btnGet5"").on(""click"", function () {//传递实体 json对象
                $.ajax({ url: ""/api/users/GetUserByModel"", type: ""get"", data: user, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnGet6"").on(""click"", function () {//传递实体  必须FromUri才能找到
                $.a");
                WriteLiteral(@"jax({ url: ""/api/users/GetUserByModelUri"", type: ""get"", data: user, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnGet7"").on(""click"", function () {//传递实体,序列化后传递
                $.ajax({ url: ""/api/users/GetUserByModelSerialize"", type: ""get"", data: { userString: JSON.stringify(user) }, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnGet8"").on(""click"", function () {//传递实体,序列化后传递
                $.ajax({ url: ""/api/users/GetUserByModelSerializeWithoutGet"", type: ""get"", data: { userString: JSON.stringify(user) }, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnGet9"").on(""click"", function () {//传递实体,序列化后传递  405 Method Not Allowed    不带httpget需要用get开头
                $.ajax({ url: ""/api/users/NoGetUserByModelSerializeWithoutGet"", type: ""get"", data: { userString: JSON.stringify(user) }, success: function (data) { alert(data); }, datatype: ""json"" });
     ");
                WriteLiteral(@"       });


            $(""#btnPost1"").on(""click"", function () {//单个值传递，json数据不要key，这样后台才能获取
                $.ajax({ url: ""/api/users/RegisterNoKey"", type: ""post"", data: { """": $(""#txtId"").val() }, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnPost2"").on(""click"", function () {//key-value形式后台拿不到这个参数，但是可以直接访问
                $.ajax({ url: ""/api/users/Register"", type: ""post"", data: { ""id"": $(""#txtId"").val() }, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnPost3"").on(""click"", function () {//传递json格式的，后台可以用实体接收
                $.ajax({ url: ""/api/users/RegisterUser"", type: ""post"", data: user, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnPost4"").on(""click"", function () {//传递json序列化后的格式，后台可以用实体接收,需要指定contentType
                $.ajax({ url: ""/api/users/RegisterUser"", type: ""post"", data: JSON.stringify(user), success: function (data) { alert(dat");
                WriteLiteral(@"a); }, datatype: ""json"", contentType: 'application/json', });
            });
            $(""#btnPost5"").on(""click"", function () {//JObject接收
                $.ajax({ url: ""/api/users/RegisterObject"", type: ""post"", data: { ""User"": user, ""Info"": info }, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnPost6"").on(""click"", function () {//Dynamic  失败了  要序列化就可以了
                $.ajax({ url: ""/api/users/RegisterObjectDynamic"", type: ""post"", data: { ""User"": user, ""Info"": info }, success: function (data) { alert(data); }, datatype: ""json"", contentType: 'application/json' });
            });
            //也可以还是包装成一个对象

            $(""#btnPut1"").on(""click"", function () {//单个值传递，json数据不要key，这样后台才能获取
                $.ajax({ url: ""/api/users/RegisterNoKeyPut"", type: ""put"", data: { """": $(""#txtId"").val() }, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnPut2"").on(""click"", function () {//key-value形式后台拿不到
    ");
                WriteLiteral(@"            $.ajax({ url: ""/api/users/RegisterPut"", type: ""put"", data: { ""id"": $(""#txtId"").val() }, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnPut3"").on(""click"", function () {//传递json格式的，后台可以用实体接收
                $.ajax({ url: ""/api/users/RegisterUserPut"", type: ""put"", data: user, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnPut4"").on(""click"", function () {//传递json序列化后的格式，后台可以用实体接收,需要指定contentType
                $.ajax({ url: ""/api/users/RegisterUserPut"", type: ""put"", data: JSON.stringify(user), success: function (data) { alert(data); }, datatype: ""json"", contentType: 'application/json', });
            });
            $(""#btnPut5"").on(""click"", function () {//JObject接收
                $.ajax({ url: ""/api/users/RegisterObjectPut"", type: ""put"", data: { ""User"": user, ""Info"": info }, success: function (data) { alert(data); }, datatype: ""json"" });
            });
            $(""#btnPut6"").on(""c");
                WriteLiteral(@"lick"", function () {//Dynamic  失败了
                $.ajax({ url: ""/api/users/RegisterObjectDynamicPut"", type: ""put"", data: { ""User"": user, ""Info"": info }, success: function (data) { alert(data); }, datatype: ""json"", contentType: 'application/json' });
            });

            //delete一样 type换成delete
            //如果大家还有别的传递和获取 自动绑定好的方式，欢迎分享

            $(""#btnLogin"").on(""click"", function () {
                $.ajax({
                    url: ""/api/users/Login"",
                    type: ""GET"",
                    data: { ""Account"": $(""#txtAccount"").val(), ""Password"": $(""#txtPassword"").val() },
                    success: function (data) {
                        var result = JSON.parse(data);
                        if (result.Result) {
                            ticket = result.Ticket;
                            alert(result.Ticket);
                        }
                        else {
                            alert(""failed"");
                        }
                    ");
                WriteLiteral(@"}, datatype: ""json""
                });
            });

            var ticket = """";//登陆后放在某个html里面，ajax都得带上


            //microsoft.aspnet.webapi.cors
            jQuery.support.cors = true;
            var location = ""http://localhost:8088"";
            $(""#btnGetCors1"").on(""click"", function () {
                $.ajax({ url: location + ""/api/users/GetUserByID"", type: ""get"", data: { ""id"": 1 }, success: function (data) { alert(data); }, datatype: ""json"" });
            });

        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
